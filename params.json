{
  "name": "Opencvdragrect",
  "tagline": "Drag a rectangle on an image window",
  "body": "# opencvdragrect\r\n\r\nTo drag a rectangle on an image window. Select the entire rectangle and move it around. Hold on to corner or a side and resize the rectangle.\r\n\r\n![Preview gif](https://cdn.rawgit.com/arccoder/opencvdragrect/master/preview.gif \"Preview Image\")\r\n\r\n## Usage\r\n\r\nImport script\r\n```python\r\nimport selectinwindow\r\nwindowName = 'named window'\r\nrectI = selectinwindow.dragRect\r\n```\r\nInitialize the  drag object\r\n```python\r\nselectinwindow.init(rectI, image, windowName, imageWidth, imageHeight)\r\n```\r\nSet mouse click callback function\r\n```python\r\ncv2.setMouseCallback(windowName, selectinwindow.dragrect, rectI)\r\n```\r\n**Double click** inside the dragged rectangle to finalize the location of the rect\r\nThe rectangle location can be accessed anytime through outRect\r\n```python\r\nrectI.outRect\r\n``` \r\nExample of the usage can be found in ```script.py```\r\n\r\n\r\n## Note\r\nYou might get the following error\r\n```\r\nRuntimeError: maximum recursion depth exceeded\r\n```\r\nTo avoid this error, you can add the following code.\r\n```python\r\nimport sys\r\nsys.setrecursionlimit(10 ** 9)\r\n```\r\nIt would help, while holding the rectangle corner or edge for resizing the rectangle the dragging is done in increments by releasing the held corner or sides intermittently.\r\n\r\n## References\r\n1. Implementation on how to set callbacks and the infinite loop.\r\n  *  [Capturing mouse click events with Python and OpenCV](http://www.pyimagesearch.com/2015/03/09/capturing-mouse-click-events-with-python-and-opencv/)\r\n2. Mouse callback events documentation\r\n  *  [OpenCV 3.1.0 High-level GUI](http://docs.opencv.org/3.1.0/d7/dfc/group__highgui.html)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}